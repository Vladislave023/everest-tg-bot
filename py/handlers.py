import logging
from db import get_db_connection
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from telegram import (
    Update,
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaDocument,
    Message,
    User,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, CommandHandler, filters
from db import (
    add_user_request, get_pending_requests, get_user_active_request,
    start_request_processing, create_session, end_session,
    get_active_session_by_user, get_active_admin_session,
    add_message_to_request, add_session_message, get_messages_for_request
)
from keyboards import (
    get_main_menu_keyboard, 
    get_admin_request_keyboard,
    get_admin_session_keyboard,
    get_admin_main_keyboard
)
from config import ADMIN_ID, WORKING_HOURS_TEXT, ALBUM_THRESHOLD_SECONDS

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
user_media_groups = {}

class MediaGroup:
    def __init__(self, request_id: int, user_id: int, user_name: str, username: str, 
                 caption: str = None, session_id: int = None):
        self.request_id = request_id
        self.user_id = user_id
        self.user_name = user_name
        self.username = username
        self.caption = caption
        self.session_id = session_id
        self.messages = []
        self.created_at = datetime.now()
    
    def is_expired(self) -> bool:
        return (datetime.now() - self.created_at).total_seconds() > ALBUM_THRESHOLD_SECONDS
    
    def add_message(self, message):
        self.messages.append(message)
        if message.caption and not self.caption:
            self.caption = message.caption

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    welcome_text = """
<b>–ö–æ–º–ø–∞–Ω–∏—è "–≠–í–ï–†–ï–°–¢"</b> - –ø–æ—Å—Ç–∞–≤–∫–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, —à–∏–Ω –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π.

–ü–æ—á—Ç–∞: trucks@everest-tk.ru 
–¢–µ–ª–µ—Ñ–æ–Ω: +7 914 310-53-49
–°–∞–π—Ç: everest-tk.ru

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ Telegram ‚Äì –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ø–Ω-–ø—Ç, 9:00‚Äì18:00, –•–∞–±–∞—Ä–æ–≤—Å–∫).

–ß–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

‚Ä¢ üìù –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
‚Ä¢ üìÇ –ö–∞—Ç–∞–ª–æ–≥ - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É
‚Ä¢ üì¢ –ù–∞—à –∫–∞–Ω–∞–ª - –∞–∫—Ü–∏–∏, –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ—Å—Ç–∞–≤–∫–∏
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='HTML'
    )

def is_forwarded_post(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º"""
    return (message.forward_from_chat is not None or 
            message.forward_from is not None or
            message.forward_sender_name is not None)
async def end_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    session_id = int(query.data.split('_')[2])
    end_session(session_id)
    
    await query.edit_message_text(
        "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=get_admin_main_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    session = get_active_session_by_user(session_id)
    if session:
        await context.bot.send_message(
            chat_id=session['user_id'],
            text="–°–µ—Å—Å–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        )
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'contact_specialist':
        user = query.from_user
        
        if get_active_session_by_user(user.id):
            await query.edit_message_text(
                "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–µ—Å—Å–∏–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        if get_user_active_request(user.id):
            await query.edit_message_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        request_id = add_user_request(
            user_id=user.id,
            user_name=user.full_name,
            username=user.username,
            request_text="–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
        )
        
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ Telegram. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
            reply_markup=get_main_menu_keyboard()
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å (#{request_id}) –æ—Ç {user.full_name} (@{user.username or '–Ω–µ—Ç'})",
            reply_markup=get_admin_request_keyboard(request_id)
        )
    
    elif query.data.startswith('accept_request_'):
        if query.from_user.id != ADMIN_ID:
            await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        if get_active_admin_session():
            await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        request_id = int(query.data.split('_')[2])
        
        if start_request_processing(request_id):
            with get_db_connection() as conn:
                cursor = conn.execute(
                    "SELECT user_id, user_name, username FROM user_requests WHERE request_id = ?",
                    (request_id,)
                )
                request = cursor.fetchone()
            
            if request:
                session_id = create_session(request_id, request['user_id'])
                messages = get_messages_for_request(request_id)
                
                media_group = []
                for msg in messages:
                    if msg['media_type'] == 'photo':
                        media_group.append(InputMediaPhoto(
                            media=msg['media_id'],
                            caption=f"üë§ {request['user_name']} (@{request['username'] or '–Ω–µ—Ç'}):\n{msg['message_text']}" if msg['message_text'] else None
                        ))
                    elif msg['media_type'] == 'video':
                        media_group.append(InputMediaVideo(
                            media=msg['media_id'],
                            caption=f"üë§ {request['user_name']} (@{request['username'] or '–Ω–µ—Ç'}):\n{msg['message_text']}" if msg['message_text'] else None
                        ))
                    elif msg['media_type'] == 'document':
                        media_group.append(InputMediaDocument(
                            media=msg['media_id'],
                            caption=f"üë§ {request['user_name']} (@{request['username'] or '–Ω–µ—Ç'}):\n{msg['message_text']}" if msg['message_text'] else None
                        ))
                    elif msg['message_text']:
                        await context.bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"üë§ {request['user_name']} (@{request['username'] or '–Ω–µ—Ç'}):\n{msg['message_text']}",
                            reply_markup=get_admin_session_keyboard(session_id)
                        )
                
                if media_group:
                    await context.bot.send_media_group(
                        chat_id=ADMIN_ID,
                        media=media_group
                    )
                
                await query.edit_message_text(
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å #{request_id}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request['user_name']} (@{request['username'] or '–Ω–µ—Ç'})\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                    reply_markup=get_admin_session_keyboard(session_id)
                )
                
                await context.bot.send_message(
                    chat_id=request['user_id'],
                    text="üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
                )
    
    elif query.data.startswith('reject_request_'):
        if query.from_user.id != ADMIN_ID:
            await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        request_id = int(query.data.split('_')[2])
        
        with get_db_connection() as conn:
            conn.execute(
                "DELETE FROM user_requests WHERE request_id = ?",
                (request_id,)
            )
            conn.commit()
        
        await query.edit_message_text(f"‚ùå –ó–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    
    elif query.data == 'show_all_requests':
        if query.from_user.id != ADMIN_ID:
            await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        pending_requests = get_pending_requests()
        if pending_requests:
            text = "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
            for req in pending_requests:
                text += f"\n#{req['request_id']} –æ—Ç {req['user_name']} (@{req['username'] or '–Ω–µ—Ç'})"
            
            await query.edit_message_text(
                text,
                reply_markup=get_admin_main_keyboard()
            )
        else:
            await query.edit_message_text(
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                reply_markup=get_admin_main_keyboard()
            )
    
    elif query.data == 'end_all_sessions':
        if query.from_user.id != ADMIN_ID:
            await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        with get_db_connection() as conn:
            conn.execute("DELETE FROM active_sessions")
            conn.execute("UPDATE user_requests SET status = 'pending' WHERE status = 'in_progress'")
            conn.commit()
            
        await query.edit_message_text(
            "‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.",
            reply_markup=get_admin_main_keyboard()
        )
    
    elif query.data == 'clear_all_requests':
        if query.from_user.id != ADMIN_ID:
            await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        with get_db_connection() as conn:
            conn.execute("DELETE FROM user_requests")
            conn.execute("DELETE FROM active_sessions")
            conn.execute("DELETE FROM session_messages")
            conn.commit()
            
        await query.edit_message_text(
            "‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã, —Å–µ—Å—Å–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.",
            reply_markup=get_admin_main_keyboard()
        )


async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.effective_message
    
    if session := get_active_session_by_user(user.id):
        await forward_message_to_admin(update, context, session)
        return

    if not (request := get_user_active_request(user.id)):
        await message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞)
    if message.photo or message.video or message.document:
        media_group_id = message.media_group_id or f"single_{message.message_id}"
        
        if media_group_id not in user_media_groups:
            user_media_groups[media_group_id] = MediaGroup(
                request['request_id'], 
                user.id, 
                user.full_name, 
                user.username
            )
        
        user_media_groups[media_group_id].add_message(message)
    
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        add_message_to_request(
            request['request_id'], 
            user.id, 
            message_text=message.text
        )
        await message.reply_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_menu_keyboard()
        )

async def forward_message_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, session: Dict):
    user = update.effective_user
    message = update.effective_message
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞)
    if message.photo or message.video or message.document:
        media_group_id = message.media_group_id or f"single_{message.message_id}"
        
        if media_group_id not in user_media_groups:
            user_media_groups[media_group_id] = MediaGroup(
                session['request_id'],
                user.id,
                user.full_name,
                user.username,
                session_id=session['session_id']
            )
        
        user_media_groups[media_group_id].add_message(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        add_session_message(
            session['session_id'],
            user.id,
            message_text=message.text
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üë§ {user.full_name}:\n{message.text}",
            reply_markup=get_admin_session_keyboard(session['session_id'])
        )

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    message = update.effective_message
    session = get_active_admin_session()
    
    if not session:
        await message.reply_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_main_keyboard()
        )
        return
    
    user_id = session['user_id']
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞)
    if message.photo or message.video or message.document:
        media_group_id = message.media_group_id or f"single_{message.message_id}"
        
        if media_group_id not in user_media_groups:
            user_media_groups[media_group_id] = MediaGroup(
                session['request_id'],
                ADMIN_ID,
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                None,
                session_id=session['session_id']
            )
        
        user_media_groups[media_group_id].add_message(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        add_session_message(
            session['session_id'],
            ADMIN_ID,
            message_text=message.text
        )
        await context.bot.send_message(
            chat_id=user_id,
            text=f"{message.text}"
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    await update.message.reply_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_main_keyboard()  # –ö–Ω–æ–ø–∫–∏ –∏–∑ keyboards.py
    )
async def check_media_groups(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    
    for media_group_id, group in list(user_media_groups.items()):
        if group.is_expired():
            try:
                media = []
                for i, msg in enumerate(sorted(group.messages, key=lambda m: m.message_id)):
                    caption = group.caption if i == 0 else None
                    
                    if msg.photo:
                        media.append(InputMediaPhoto(
                            media=msg.photo[-1].file_id,
                            caption=caption
                        ))
                    elif msg.video:
                        media.append(InputMediaVideo(
                            media=msg.video.file_id,
                            caption=caption
                        ))
                    elif msg.document:
                        media.append(InputMediaDocument(
                            media=msg.document.file_id,
                            caption=caption
                        ))
                
                if media:
                    if group.session_id:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        with get_db_connection() as conn:
                            cursor = conn.execute(
                                """SELECT s.session_id, s.request_id, r.user_id, r.user_name, r.username 
                                   FROM active_sessions s
                                   JOIN user_requests r ON s.request_id = r.request_id
                                   WHERE s.session_id = ?""",
                                (group.session_id,)
                            )
                            session_info = cursor.fetchone()
                        
                        if session_info:
                            session_info = dict(session_info)
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            if group.user_id == ADMIN_ID:
                                # –ú–µ–¥–∏–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                target_chat_id = session_info['user_id']
                                sender_name = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
                            else:
                                # –ú–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                target_chat_id = ADMIN_ID
                                sender_name = f"{group.user_name} (@{group.username or '–Ω–µ—Ç'})"
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
                            await context.bot.send_media_group(
                                chat_id=target_chat_id,
                                media=media
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            for msg in group.messages:
                                if msg.photo:
                                    add_session_message(
                                        group.session_id,
                                        group.user_id,
                                        media_type='photo',
                                        media_id=msg.photo[-1].file_id,
                                        message_text=group.caption if msg == group.messages[0] else None
                                    )
                                elif msg.video:
                                    add_session_message(
                                        group.session_id,
                                        group.user_id,
                                        media_type='video',
                                        media_id=msg.video.file_id,
                                        message_text=group.caption if msg == group.messages[0] else None
                                    )
                                elif msg.document:
                                    add_session_message(
                                        group.session_id,group.user_id,
                                        media_type='document',
                                        media_id=msg.document.file_id,
                                        message_text=group.caption if msg == group.messages[0] else None
                                    )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
                        await context.bot.send_media_group(
                            chat_id=ADMIN_ID,
                            media=media
                        )
                        
                        for msg in group.messages:
                            if msg.photo:
                                add_message_to_request(
                                    group.request_id,
                                    group.user_id,
                                    media_type='photo',
                                    media_id=msg.photo[-1].file_id,
                                    message_text=group.caption if msg == group.messages[0] else None
                                )
                            elif msg.video:
                                add_message_to_request(
                                    group.request_id,
                                    group.user_id,
                                    media_type='video',
                                    media_id=msg.video.file_id,
                                    message_text=group.caption if msg == group.messages[0] else None
                                )
                            elif msg.document:
                                add_message_to_request(
                                    group.request_id,
                                    group.user_id,
                                    media_type='document',
                                    media_id=msg.document.file_id,
                                    message_text=group.caption if msg == group.messages[0] else None
                                )
                
                del user_media_groups[media_group_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")